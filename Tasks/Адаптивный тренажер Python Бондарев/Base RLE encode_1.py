# Кодирование длин серий — это базовый алгоритм сжатия данных.
#
# В этой задаче мы реализуем одну из самых простых его вариантов.
#
# На вход алгоритму подаётся строка, содержащая символы латинского алфавита. Эта строка разбивается на группы одинаковых
# символов, идущих подряд ("серии"). Каждая серия характеризуется повторяющимся символом и количеством повторений.
# Именно эта информация и записывается в код: сначала пишется длина серии повторяющихся символов, затем сам символ.
# У серий длиной в один символ количество повторений будем опускать.
#
# Например, рассмотрим строку
#
# aaabccccCCaB
# Разобъём её на серии
# aaa b cccc CC a B
# После чего закодируем серии и получим итоговую строку, которую и будем считать результатом работы алгоритма.
# 3ab4c2CaB
# Формат ввода:
# Одна строка, содержащая произвольные символы латинского алфавита.
#
# Формат вывода:
# Строка, содержащая закодированную последовательность.
#
# Sample Input 1:
#
# aaabccccCCaB
# Sample Output 1:
#
# 3ab4c2CaB
# Sample Input 2:
#
# a
# Sample Output 2:
#
# a

#             Моё решение
# a = input()
# result = []
# for i in range(len(a)):
#     cnt = 1
#     for j in range(i, len(a) - 1):
#         if a[i] == a[j + 1]:
#             cnt += 1
#         else:
#             break
#     if len(result):
#         if a[i] not in result[-1]:
#             if cnt > 1:
#                 result += [f'{cnt}{a[i]}']
#             else:
#                 result += [f'{a[i]}']
#     else:
#         if cnt > 1:
#             result += [f'{cnt}{a[i]}']
#         else:
#             result += [f'{a[i]}']
#     res = ''
#     res = res.join(result)

# print(res)

#         Решение с форума
s = input() + ' ' # добавил пробел, чтобы при range(Len(s)-1) в цикле i+1 не выходило за границы инекса
counter = 0
for i in range(len(s) - 1):
    counter += 1 # счетчик стоит до условия, соответствено считает каждый цикл
    if s[i] != s[i + 1]: # здесь пошел от обратного, в результате получил возможность обнулять cnt внутри цикла
        print(f'{str(counter) if counter > 1 else ""}{s[i]}', end='')
        counter = 0




def counter(line=input(), char='', count=0):
    for letter in f'{line}_': # добавил дополнительный символ внутри f строки в цикле!!!!
        if letter == char:
            count += 1
        else:
            yield count, char
            char, count = letter, 1


def RLE(seq=counter(), ans=''):
    for el in seq:
        count, char = el
        ans += f'{count if count > 1 else ""}{char}'
    return ans


print(RLE())